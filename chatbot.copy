// Leitor de QR code e persist√™ncia de sess√£o (pronto para nuvem)
try {
  require('dotenv').config();
} catch (e) {
  console.warn('‚ö†Ô∏è dotenv n√£o encontrado, usando valores padr√£o de configura√ß√£o.');
}
const fs = require('fs');
const path = require('path');
const qrcode = require('qrcode-terminal');
const { Client, LocalAuth } = require('whatsapp-web.js');

// Caminho de sess√£o e cria√ß√£o de diret√≥rios essenciais
const SESSION_PATH = process.env.SESSION_PATH || path.join(__dirname, 'session_data');
if (!fs.existsSync(SESSION_PATH)) {
  fs.mkdirSync(SESSION_PATH, { recursive: true });
  console.log(`‚úÖ Diret√≥rio de sess√£o criado em ${SESSION_PATH}`);
}

// Etiquetas coloridas para tipos de op√ß√£o
const LABELS = {
  materials: 'üüß',   // Laranja
  solar: 'üü°',       // Amarelo
  suppliers: 'üü¶',   // Azul
  chatbot: 'üü©',      // Verde
  info: '‚ö™'         // Cinza para informa√ß√µes gerais
};

// Configura√ß√£o de hor√°rio de expediente
const WORK_HOURS = {
  weekdays: {
    start: parseInt(process.env.WEEK_START_HOUR) || 7,
    end: parseInt(process.env.WEEK_END_HOUR) || 18
  },
  saturday: {
    start: parseInt(process.env.SAT_START_HOUR) || 7,
    end: parseInt(process.env.SAT_END_HOUR) || 12
  }
};

// Estado atual do bot
const state = { inEnergySubmenu: false };

// Inicializa√ß√£o do cliente
const client = new Client({
  authStrategy: new LocalAuth({ dataPath: SESSION_PATH }),
  puppeteer: { headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'] }
});

// Helper: converte data para fuso-hor√°rio de S√£o Paulo
function getLocalDate(date = new Date()) {
  const tzString = date.toLocaleString('en-US', { timeZone: process.env.TZ || 'America/Sao_Paulo' });
  return new Date(tzString);
}

// Verifica se est√° dentro do expediente em S√£o Paulo
function isWithinWorkingHours(date = new Date()) {
  const localDate = getLocalDate(date);
  const day = localDate.getDay(); // 0=Dom,1=Seg,...6=S√°b
  const hour = localDate.getHours();

  if (day >= 1 && day <= 5) {
    return hour >= WORK_HOURS.weekdays.start && hour < WORK_HOURS.weekdays.end;
  } else if (day === 6) {
    return hour >= WORK_HOURS.saturday.start && hour < WORK_HOURS.saturday.end;
  }
  return false;
}

// Envia mensagem pelo cliente
async function sendReply(chatId, text) {
  await client.sendMessage(chatId, text);
}

// Defini√ß√µes de menus com handlers
const MAIN_MENU = {
  '1': msg => sendReply(msg.from, `${LABELS.materials} üõ†Ô∏è Me diga o que deseja que logo irei lhe atender!`),
  '2': msg => {
    state.inEnergySubmenu = true;
    return sendReply(msg.from,
      `${LABELS.solar} üåû *EK Energia Solar* - Escolha:\n` +
      `1Ô∏è‚É£ Falar com atendente\n` +
      `2Ô∏è‚É£ Como funciona a energia solar?\n\n` +
      `Digite *menu* para voltar ao in√≠cio`
    );
  },
  '3': msg => sendReply(msg.from, `${LABELS.suppliers} ü§ù Ol√°! Voc√™ √© um fornecedor, me diga seu nome e as empresas que voc√™ representa.`),
  '4': msg => sendReply(msg.from,
    `${LABELS.chatbot} üíª No momento estou criando apenas Chatbot, mas em breve terei novidades!\n` +
    `Se deseja adquirir um Chatbot para sua empresa, me diga seu nome, nome da sua empresa e com o que trabalha. Logo irei lhe atender e farei um or√ßamento.`
  )
};

const ENERGY_SUBMENU = {
  '1': msg => {
    state.inEnergySubmenu = false;
    return sendReply(msg.from,
      `${LABELS.solar} üë∑ *Micael Mrozinski* - Especialista em Energia Solar\n` +
      `üëâ https://wa.me/556699543475\n` +
      `Hor√°rio: Seg‚ÄìSex, 7h‚Äì18h (S√£o Paulo)`
    );
  },
  '2': msg => {
    state.inEnergySubmenu = false;
    return sendReply(msg.from,
      `${LABELS.solar} üåû *COMO FUNCIONA A ENERGIA SOLAR?*\n\n` +
      `1. *CAPTA√á√ÉO* - Pain√©is convertem luz em eletricidade\n` +
      `2. *CONVERS√ÉO* - Inversor adapta para sua casa\n` +
      `3. *ECONOMIA* - At√© 95% de redu√ß√£o na conta\n\n` +
      `üîó Detalhes: https://www.neosolar.com.br/media/wysiwyg/Energia_Solar_Fotovoltaica_Esquema_Sistema_Off_Grid_1.jpg`
    );
  }
};

// Eventos do cliente
client.on('qr', qr => qrcode.generate(qr, { small: true }));
client.on('ready', () => console.log('ü§ñ Bot do Micael online.')); 
client.on('auth_failure', () => console.error('‚ö†Ô∏è Falha na autentica√ß√£o.')); 
client.on('disconnected', () => {
  console.log('üîå Desconectado. Reconectando...');
  client.initialize();
});

client.on('message', async msg => {
  try {
    if (!msg.from.endsWith('@c.us')) return;

    // Fora do expediente (com fuso de S√£o Paulo)
    if (!isWithinWorkingHours()) {
      const now = getLocalDate();
      return sendReply(msg.from,
        `${LABELS.info} ‚è∞ Fora de expediente!\n` +
        `Hor√°rio (S√£o Paulo): Seg‚ÄìSex ${WORK_HOURS.weekdays.start}h‚Äì${WORK_HOURS.weekdays.end}h, ` +
        `S√°b ${WORK_HOURS.saturday.start}h‚Äì${WORK_HOURS.saturday.end}h\n` +
        `Agora s√£o ${now.getHours()}h${now.getMinutes().toString().padStart(2,'0')} em S√£o Paulo.\n` +
        'Retornarei assim que poss√≠vel.'
      );
    }

    const body = msg.body.trim();
    const isMenuTrigger = /^(MENU|INICIAR|OL√Å|OLA|OI)$/i.test(body);

    // Submenu de Energia Solar
    if (state.inEnergySubmenu) {
      const handler = ENERGY_SUBMENU[body];
      if (handler) return handler(msg);
    }
    // Exibir menu principal
    else if (isMenuTrigger || !/^[1-4]$/.test(body)) {
      state.inEnergySubmenu = false;
      return sendReply(msg.from,
        `üëã Ol√°! Eu sou o *Micael Mrozinski*! Em que posso ajudar?\n\n` +
        `1Ô∏è‚É£ Materiais de constru√ß√£o (Construfacil)\n` +
        `2Ô∏è‚É£ Energia solar (EK Energia Solar)\n` +
        `3Ô∏è‚É£ Fornecedores\n` +
        `4Ô∏è‚É£ Programas para computador (Chatbot)`
      );
    }
    // Handler principal
    else {
      const handler = MAIN_MENU[body];
      if (handler) return handler(msg);
    }

    // Fallback
    return sendReply(msg.from, '‚ùì Comando n√£o reconhecido. Digite *menu* para voltar.');
  } catch (err) {
    console.error('‚ùó Erro ao processar mensagem:', err);
  }
});

client.initialize();

